// Code generated by MockGen. DO NOT EDIT.
// Source: renter.go

// Package renter is a generated GoMock package.
package renter

import (
	bookish_server "github.com/davidlick/bookish/bookish-server"
	models "github.com/davidlick/bookish/bookish-server/models"
	uuid "github.com/gobuffalo/uuid"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// ListAll mocks base method
func (m *MockStorage) ListAll() ([]models.Renter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll")
	ret0, _ := ret[0].([]models.Renter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll
func (mr *MockStorageMockRecorder) ListAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockStorage)(nil).ListAll))
}

// FetchDetails mocks base method
func (m *MockStorage) FetchDetails(id string) (models.Renter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDetails", id)
	ret0, _ := ret[0].(models.Renter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDetails indicates an expected call of FetchDetails
func (mr *MockStorageMockRecorder) FetchDetails(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDetails", reflect.TypeOf((*MockStorage)(nil).FetchDetails), id)
}

// New mocks base method
func (m *MockStorage) New(name, address, email, phoneNumber string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", name, address, email, phoneNumber)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New
func (mr *MockStorageMockRecorder) New(name, address, email, phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockStorage)(nil).New), name, address, email, phoneNumber)
}

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ListRenters mocks base method
func (m *MockService) ListRenters() ([]bookish_server.Renter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRenters")
	ret0, _ := ret[0].([]bookish_server.Renter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRenters indicates an expected call of ListRenters
func (mr *MockServiceMockRecorder) ListRenters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRenters", reflect.TypeOf((*MockService)(nil).ListRenters))
}

// FetchRenter mocks base method
func (m *MockService) FetchRenter(id string) (bookish_server.Renter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRenter", id)
	ret0, _ := ret[0].(bookish_server.Renter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRenter indicates an expected call of FetchRenter
func (mr *MockServiceMockRecorder) FetchRenter(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRenter", reflect.TypeOf((*MockService)(nil).FetchRenter), id)
}

// RegisterRenter mocks base method
func (m *MockService) RegisterRenter(fullName, address, email, phoneNumber string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRenter", fullName, address, email, phoneNumber)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterRenter indicates an expected call of RegisterRenter
func (mr *MockServiceMockRecorder) RegisterRenter(fullName, address, email, phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRenter", reflect.TypeOf((*MockService)(nil).RegisterRenter), fullName, address, email, phoneNumber)
}
